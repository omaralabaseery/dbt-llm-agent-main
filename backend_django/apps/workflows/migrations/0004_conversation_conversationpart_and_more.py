# Generated by Django 5.2 on 2025-06-20 10:59

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("accounts", "0006_organisationsettings_metabase_api_key_and_more"),
        ("workflows", "0003_merge_20250618_0949"),
    ]

    operations = [
        migrations.CreateModel(
            name="Conversation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "external_id",
                    models.CharField(
                        blank=True,
                        help_text="External ID (e.g., Slack thread ID, web session ID)",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "channel",
                    models.CharField(
                        choices=[
                            ("slack", "Slack"),
                            ("web", "Web Interface"),
                            ("mcp", "MCP Server"),
                            ("api", "Direct API"),
                        ],
                        help_text="Channel where conversation originated",
                        max_length=50,
                    ),
                ),
                (
                    "user_id",
                    models.CharField(
                        blank=True,
                        help_text="User identifier from the external system",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("error", "Error"),
                            ("timeout", "Timeout"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "trigger",
                    models.CharField(
                        choices=[
                            ("slack_mention", "Slack Mention"),
                            ("web_interface", "Web Interface"),
                            ("mcp_server", "MCP Server"),
                            ("api_call", "API Call"),
                        ],
                        default="slack_mention",
                        help_text="What triggered this conversation",
                        max_length=50,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Auto-generated or user-provided conversation title",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "summary",
                    models.TextField(
                        blank=True,
                        help_text="AI-generated summary of the conversation",
                        null=True,
                    ),
                ),
                (
                    "initial_question",
                    models.TextField(
                        help_text="The first question that started this conversation"
                    ),
                ),
                (
                    "channel_type",
                    models.CharField(
                        default="slack",
                        help_text="Type of channel (slack, web, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "channel_id",
                    models.CharField(
                        blank=True,
                        help_text="Channel ID where conversation took place",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "user_external_id",
                    models.CharField(
                        blank=True,
                        help_text="External user ID from the source system",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "llm_provider",
                    models.CharField(
                        default="anthropic",
                        help_text="LLM provider used for this conversation",
                        max_length=50,
                    ),
                ),
                (
                    "enabled_integrations",
                    models.JSONField(
                        default=list,
                        help_text="List of integrations enabled for this conversation",
                    ),
                ),
                ("total_parts", models.PositiveIntegerField(default=0)),
                ("total_tokens_used", models.PositiveIntegerField(default=0)),
                (
                    "total_cost",
                    models.DecimalField(
                        decimal_places=4,
                        default=0,
                        help_text="Total cost in USD",
                        max_digits=10,
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user_rating",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)],
                        help_text="User rating 1-5",
                        null=True,
                    ),
                ),
                ("user_feedback", models.TextField(blank=True, null=True)),
                (
                    "conversation_context",
                    models.JSONField(
                        default=dict,
                        help_text="Additional conversation context and metadata",
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_org_related",
                        to="accounts.organisation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Conversation",
                "verbose_name_plural": "Conversations",
                "db_table": "conversations",
            },
        ),
        migrations.CreateModel(
            name="ConversationPart",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sequence_number",
                    models.PositiveIntegerField(
                        help_text="Order of this part within the conversation"
                    ),
                ),
                (
                    "part_type",
                    models.CharField(
                        choices=[
                            ("user_message", "User Message"),
                            ("agent_response", "Agent Response"),
                            ("tool_call", "Tool Call"),
                            ("tool_result", "Tool Result"),
                            ("agent_thinking", "Agent Thinking"),
                            ("error", "Error"),
                            ("system", "System Message"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        help_text="The actual content of this conversation part"
                    ),
                ),
                (
                    "tool_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of tool used (if part_type is tool_call/tool_result)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "tool_input",
                    models.JSONField(
                        blank=True,
                        help_text="Input parameters for tool call",
                        null=True,
                    ),
                ),
                (
                    "tool_output",
                    models.JSONField(
                        blank=True, help_text="Output from tool execution", null=True
                    ),
                ),
                (
                    "tokens_used",
                    models.PositiveIntegerField(
                        default=0, help_text="Tokens used for this part"
                    ),
                ),
                (
                    "cost",
                    models.DecimalField(
                        decimal_places=4,
                        default=0,
                        help_text="Cost for this part in USD",
                        max_digits=8,
                    ),
                ),
                (
                    "duration_ms",
                    models.PositiveIntegerField(
                        default=0, help_text="Duration in milliseconds"
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        default=dict, help_text="Additional metadata for this part"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "conversation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="parts",
                        to="workflows.conversation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Conversation Part",
                "verbose_name_plural": "Conversation Parts",
                "db_table": "conversation_parts",
                "ordering": ["sequence_number"],
            },
        ),
        migrations.AddIndex(
            model_name="conversation",
            index=models.Index(
                fields=["external_id", "channel"], name="conversatio_externa_c5ccf9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="conversation",
            index=models.Index(
                fields=["organisation", "started_at"],
                name="conversatio_organis_41b2e7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="conversation",
            index=models.Index(fields=["status"], name="conversatio_status_742c74_idx"),
        ),
        migrations.AddIndex(
            model_name="conversation",
            index=models.Index(
                fields=["user_id"], name="conversatio_user_id_0d3af7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="conversationpart",
            index=models.Index(
                fields=["conversation", "sequence_number"],
                name="conversatio_convers_f62588_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="conversationpart",
            index=models.Index(
                fields=["part_type"], name="conversatio_part_ty_5e3d90_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="conversationpart",
            index=models.Index(
                fields=["tool_name"], name="conversatio_tool_na_60737f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="conversationpart",
            index=models.Index(
                fields=["created_at"], name="conversatio_created_6de270_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="conversationpart",
            unique_together={("conversation", "sequence_number")},
        ),
    ]
