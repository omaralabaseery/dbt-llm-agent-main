"""
Django settings for ragstar_django project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import sys
import dj_database_url
from datetime import timedelta
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Add the 'apps' directory to the Python path
sys.path.insert(0, str(BASE_DIR / "apps"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# Detect the current runtime environment (local, development, production)
ENVIRONMENT = os.environ.get("ENVIRONMENT", "local").lower()
IS_LOCAL = ENVIRONMENT == "local"
IS_DEVELOPMENT = ENVIRONMENT == "development"
IS_PRODUCTION = ENVIRONMENT == "production"

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY", "django-insecure-i7l&cnk2eemm1e!13kew37c=ctkpa2!0ufw)v&9vlwzqolq(y="
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = IS_LOCAL  # Enable Django debug mode only for the local environment

# Production-ready ALLOWED_HOSTS configuration
ALLOWED_HOSTS = [
    ".ngrok-free.app",
    "127.0.0.1",
    "localhost",
    "backend-django",
    "frontend-nextjs",
]

# Add production hosts from environment variables
PRODUCTION_HOSTS = os.environ.get("ALLOWED_HOSTS", "").split(",")
ALLOWED_HOSTS.extend([host.strip() for host in PRODUCTION_HOSTS if host.strip()])

# Derive frontend configuration from NEXTAUTH_URL
NEXTAUTH_URL = os.environ.get("NEXTAUTH_URL")
FRONTEND_URL = None
APP_HOST = None

if NEXTAUTH_URL:
    try:
        parsed_url = urlparse(NEXTAUTH_URL)
        FRONTEND_URL = NEXTAUTH_URL.rstrip("/")
        APP_HOST = parsed_url.hostname
        if APP_HOST:
            ALLOWED_HOSTS.append(APP_HOST)
    except Exception:
        pass

# Fallback for local development
if not FRONTEND_URL:
    FRONTEND_URL = "http://localhost:3000"

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "pgvector.django",
    "django_extensions",
    # "django_cryptography",
    # Use full AppConfig paths
    "apps.accounts.apps.AccountsConfig",
    "apps.data_sources.apps.DataSourcesConfig",
    "apps.knowledge_base.apps.KnowledgeBaseConfig",
    "apps.embeddings.apps.EmbeddingsConfig",
    "apps.llm_providers.apps.LlmProvidersConfig",
    "apps.workflows.apps.WorkflowsConfig",
    "apps.integrations.apps.IntegrationsConfig",
    "apps.waitlist.apps.WaitlistConfig",
    "apps.whitelist.apps.WhitelistConfig",
    # Removed MCP server app â€“ migrated to standalone FastAPI service
    # "apps.mcp_server.apps.McpServerConfig",
]

AUTH_USER_MODEL = "accounts.User"

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "ragstar.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ragstar.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASE_URL_FROM_ENV = os.environ.get("DATABASE_URL")

if DATABASE_URL_FROM_ENV:
    DATABASES = {
        "default": dj_database_url.config(
            default=DATABASE_URL_FROM_ENV,
            conn_max_age=600,
            ssl_require=os.environ.get("DB_SSL_REQUIRE", "false").lower() == "true",
        )
    }
else:
    # Default database configuration for local development
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": "ragstar_local_dev",
            "USER": "postgres",
            "PASSWORD": "password",
            "HOST": "localhost",
            "PORT": "5432",
        }
    }

# Celery Configuration
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "redis://redis:6379/0")
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"  # Will be updated after TIME_ZONE is determined

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

# Timezone configuration
TIME_ZONE = os.environ.get("TZ", "UTC")

USE_I18N = True

USE_TZ = True

# Update Celery timezone to match Django timezone
CELERY_TIMEZONE = TIME_ZONE

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

STATIC_ROOT = BASE_DIR / "staticfiles"

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Security settings for production
if IS_PRODUCTION:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = "DENY"
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

    # SSL Settings (uncomment when using HTTPS)
    # SECURE_SSL_REDIRECT = True
    # SESSION_COOKIE_SECURE = True
    # CSRF_COOKIE_SECURE = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# MCP OAuth Configuration
MCP_AUTHORIZATION_BASE_URL = os.environ.get(
    "AUTHORIZATION_BASE_URL", "http://localhost:8000"
)

# OAuth 2.0 Settings for MCP
MCP_OAUTH_ACCESS_TOKEN_LIFETIME = timedelta(hours=1)
MCP_OAUTH_REFRESH_TOKEN_LIFETIME = timedelta(days=7)

# NextAuth URL for OAuth flow redirects
NEXTAUTH_URL = os.environ.get("NEXTAUTH_URL", "http://localhost:3000/")
NEXT_PUBLIC_API_URL = os.environ.get("NEXT_PUBLIC_API_URL", "http://localhost:8000")

# GitHub App Credentials
GITHUB_APP_CLIENT_ID = os.environ.get("GITHUB_APP_CLIENT_ID")
GITHUB_APP_CLIENT_SECRET = os.environ.get("GITHUB_APP_CLIENT_SECRET")

# CORS origins - include MCP-related origins
ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Frontend
    "http://localhost:8080",  # Standalone MCP server (if used)
    "https://claude.ai",  # Claude.ai
    "https://api.claude.ai",  # Claude API
    "*",  # For development - should be restricted in production
]

# --- Centralized Verbosity Control ---
# Define the log level for RAGstar application components.
# Controlled by the SETTINGS_LOG_LEVEL environment variable.
# Valid values: "DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"
SETTINGS_LOG_LEVEL_ENV = os.environ.get("SETTINGS_LOG_LEVEL", "INFO").upper()
# Ensure the level is one of the valid logging levels, default to INFO if invalid.
VALID_LOG_LEVELS = ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
RAGSTAR_LOG_LEVEL = (
    SETTINGS_LOG_LEVEL_ENV if SETTINGS_LOG_LEVEL_ENV in VALID_LOG_LEVELS else "INFO"
)


# CORS Configuration
CORS_ALLOWED_ORIGINS = [
    FRONTEND_URL,
    "http://localhost:3000",  # Explicit local development
    "http://127.0.0.1:3000",  # Alternative localhost
]

# Add APP_HOST-based origin if APP_HOST is set
if APP_HOST:
    CORS_ALLOWED_ORIGINS.append(f"http://{APP_HOST}:3000")
    # For HTTPS in production
    CORS_ALLOWED_ORIGINS.append(f"https://{APP_HOST}")

CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https://.*\.ngrok-free\.app$",
    r"^https://.*\.vercel\.app$",  # For Vercel deployments
]

CSRF_TRUSTED_ORIGINS = [
    FRONTEND_URL,
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# Add APP_HOST-based origin if APP_HOST is set
if APP_HOST:
    CSRF_TRUSTED_ORIGINS.append(f"http://{APP_HOST}:3000")
    # For HTTPS in production
    CSRF_TRUSTED_ORIGINS.append(f"https://{APP_HOST}")

# CORS Security Settings
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False  # Be explicit about not allowing all origins

# Allowed headers for CORS requests
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# Allowed methods for CORS requests
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

# --- Logging Configuration ---

# Add REST_FRAMEWORK settings for JWT
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    )
}

# Simple JWT Configuration
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
}


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,  # Keep Django's default loggers
    "formatters": {
        "verbose": {
            # Include timestamp, level, logger name, and message
            "format": "{levelname} {asctime} {name} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
        "colored": {  # Add this formatter
            "()": "coloredlogs.ColoredFormatter",
            # Updated format string for better readability
            "format": "%(asctime)s [%(levelname)-8s] %(name)s:%(funcName)s:%(lineno)d - %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
            "field_styles": {
                "asctime": {"color": "green"},
                "hostname": {"color": "magenta"},
                "levelname": {"color": "black", "bold": True},
                "name": {"color": "blue"},
                "programname": {"color": "cyan"},
                "username": {"color": "yellow"},
                # Add styles for new fields if desired
                "funcName": {"color": "cyan"},
                "lineno": {"color": "magenta"},
            },
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",  # Handler processes all messages DEBUG and above
            "class": "logging.StreamHandler",
            "formatter": "colored",  # Change this from 'verbose' to 'colored'
        },
    },
    "loggers": {
        "": {  # Root logger - controls default level via runserver -v
            "handlers": ["console"],
            # We will now control application loggers more directly with RAGSTAR_LOG_LEVEL
            "level": "INFO",  # Keep root logger at INFO unless Django overrides via -v
        },
        "django": {  # Control Django framework logs
            "handlers": ["console"],
            "level": "INFO",  # Avoid excessive Django internal logs unless needed
            "propagate": False,  # Don't pass to root logger
        },
        "django.request": {  # Specific handler for request errors
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.db.backends": {  # Control SQL query logging
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "core": {  # Logger for your 'core' application
            "handlers": ["console"],
            "level": RAGSTAR_LOG_LEVEL,  # Use centralized log level
            "propagate": False,
        },
        "apps.workflows": {  # Logger for the workflows app
            "handlers": ["console"],
            "level": RAGSTAR_LOG_LEVEL,  # Use centralized log level
            "propagate": False,
        },
        "apps.llm_providers": {  # Logger for llm_providers
            "handlers": ["console"],
            "level": RAGSTAR_LOG_LEVEL,
            "propagate": False,
        },
        "apps.data_sources": {  # Logger for data_sources
            "handlers": ["console"],
            "level": RAGSTAR_LOG_LEVEL,
            "propagate": False,
        },
    },
}
